import java.util.*;

public class FCFS {
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number of processes: ");
        int n = sc.nextInt();
        int pid[] = new int[n];   // process IDs
        int ar[] = new int[n];    // arrival times
        int bt[] = new int[n];    // burst times
        int ct[] = new int[n];    // completion times
        int ta[] = new int[n];    // turnaround times
        int wt[] = new int[n];    // waiting times
        int temp;
        float avgwt = 0, avgta = 0;

        // Input for arrival and burst times
        for (int i = 0; i < n; i++) {
            System.out.println("Enter process " + (i + 1) + " arrival time: ");
            ar[i] = sc.nextInt();
            System.out.println("Enter process " + (i + 1) + " burst time: ");
            bt[i] = sc.nextInt();
            pid[i] = i + 1;
        }

        // Sorting processes based on arrival times
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n - (i + 1); j++) {
                if (ar[j] > ar[j + 1]) {
                    // Swapping arrival times
                    temp = ar[j];
                    ar[j] = ar[j + 1];
                    ar[j + 1] = temp;
                    
                    // Swapping burst times
                    temp = bt[j];
                    bt[j] = bt[j + 1];
                    bt[j + 1] = temp;
                    
                    // Swapping process IDs
                    temp = pid[j];
                    pid[j] = pid[j + 1];
                    pid[j + 1] = temp;
                }
            }
        }

        // Calculating completion, turnaround, and waiting times
        for (int i = 0; i < n; i++) {
            if (i == 0) {
                ct[i] = ar[i] + bt[i];
            } else {
                if (ar[i] > ct[i - 1]) {
                    ct[i] = ar[i] + bt[i];
                } else {
                    ct[i] = ct[i - 1] + bt[i];
                }
            }
            ta[i] = ct[i] - ar[i];    // Turnaround time = completion time - arrival time
            wt[i] = ta[i] - bt[i];    // Waiting time = turnaround time - burst time
            avgwt += wt[i];           // Accumulating total waiting time
            avgta += ta[i];           // Accumulating total turnaround time
        }

        // Displaying the results
        System.out.println("\nPID\tArrival\tBurst\tComplete\tTurnaround\tWaiting");
        for (int i = 0; i < n; i++) {
            System.out.println(pid[i] + "\t" + ar[i] + "\t" + bt[i] + "\t" + ct[i] + "\t\t" + ta[i] + "\t\t" + wt[i]);
        }
        
        sc.close();
        
        // Displaying average waiting and turnaround times
        System.out.println("\nAverage Waiting Time: " + (avgwt / n));
        System.out.println("Average Turnaround Time: " + (avgta / n));
    }
}


OUTPUT:

Enter the number of processes: 
4
Enter process 1 arrival time: 
2
Enter process 1 burst time: 
5
Enter process 2 arrival time: 
3
Enter process 2 burst time: 
2
Enter process 3 arrival time: 
9
Enter process 3 burst time: 
5
Enter process 4 arrival time: 
12
Enter process 4 burst time: 
5

PID	Arrival	Burst	Complete	Turnaround	Waiting
1	2	5	7		5		0
2	3	2	9		6		4
3	9	5	14		5		0
4	12	5	19		7		2

Average Waiting Time: 1.5
Average Turnaround Time: 5.75
